buildscript {
    ext {
        projectName = 'necklife-be'
        projectVersion = '1.0.0'
        springBootVersion = '3.3.1'
        dependencyManagementVersion = '1.1.5'


        // jwt
        jsonwebtokenVersion = '0.11.5'

        // jsr
        jsr305Version = '3.0.1'

        // quartz
        quartzVersion = '2.3.0'

        // swagger & restdocs
        asciidoctorVersion = '3.3.2'
        epagesRestDocsApiSpecVersion = '0.17.1'
        hidetakeSwaggerGeneratorVersion = '2.18.2'
        springDocOpenApiUiVersion = '1.6.9'
        swaggerUIVersion = '4.1.3'

        // spotless
        spotlessVersion = '6.8.0'

        // HTTP client
        httpclientVersion = '4.5.13'


        // spring cloud
        set('springCloudVersion', "2021.0.1")
    }
}

plugins {
    id 'java'


    // spring
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"

    // code quality
    id "com.diffplug.spotless" version "${spotlessVersion}"

    // docs generation
    id 'org.asciidoctor.jvm.convert' version "${asciidoctorVersion}"
    id 'com.epages.restdocs-api-spec' version "${epagesRestDocsApiSpecVersion}"
    id 'org.hidetake.swagger.generator' version "${hidetakeSwaggerGeneratorVersion}"

    // test coverage
    id 'jacoco'

    // lombok
    id "io.freefair.lombok" version "8.6"
}

apply from: './tasks/install-git-hooks.gradle'
apply from: './tasks/set-git-commit-template.gradle'
apply from: './tasks/docs-task.gradle'



group = 'com.necklife'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'


    implementation 'org.projectlombok:lombok:1.18.30'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.104.Final:osx-aarch_64'

    // swagger & restdocs
    implementation "org.springdoc:springdoc-openapi-ui:${springDocOpenApiUiVersion}"
    swaggerUI "org.webjars:swagger-ui:${swaggerUIVersion}"
    implementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation "com.epages:restdocs-api-spec-mockmvc:${epagesRestDocsApiSpecVersion}"

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

//	// prometheus
//	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    //jwt
    implementation "io.jsonwebtoken:jjwt-api:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"

    // jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: "${jsr305Version}"

    implementation 'org.json:json:20200518'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // database
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation group:'de.flapdoodle.embed', name:'de.flapdoodle.embed.mongo', version:'4.16.1'


//	implementation 'org.hibernate:hibernate-envers'

    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'jakarta.annotation:jakarta.annotation-api'

    annotationProcessor("jakarta.persistence:jakarta.persistence-api")

    // jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: "${jsr305Version}"


    // Apple login
    implementation 'com.nimbusds:nimbus-jose-jwt:3.10'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.72'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // retry
    implementation "org.apache.httpcomponents:httpclient:${httpclientVersion}"
    implementation 'org.springframework.retry:spring-retry:1.2.5.RELEASE'
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.3.1'


    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

task buildDockerImage {
    dependsOn 'bootJar'
//    dependsOn 'copySwaggerUI'

    doLast {
        exec {
            workingDir '.'
            commandLine 'docker', 'build', '-t', "${imageName}", '--build-arg', "RELEASE_VERSION=${releaseVersion}", '.'
        }
    }
}
//def imageName = project.hasProperty('imageName') ? imageName : "api"
//def releaseVersion = project.hasProperty('releaseVersion') ? releaseVersion : null
//
//def repository = "necklife/${imageName}"


subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'


    group = 'com.necklife'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    allprojects {}

    dependencies {


        // validation
        implementation 'org.springframework.boot:spring-boot-starter-validation'


        // test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
    }
}

def moduleStaticPath = "/api/src/main/resources/static"
swaggerSources {
    sample {
        setInputFile(file(rootProject.rootDir.toString() + moduleStaticPath + "/openapi3.yaml"))
    }
}

tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
}

tasks.register('copySwaggerUI', Copy) {
    dependsOn 'generateSwaggerUI'
    def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()
    from("${generateSwaggerUISampleTask.outputDir}")
    into(rootProject.rootDir.toString() + moduleStaticPath + "/docs/swagger-ui")
}


allprojects {

    apply from: rootProject.rootDir.toString() + '/tasks/formatting-task.gradle'

    repositories {
        mavenCentral()
    }
}
